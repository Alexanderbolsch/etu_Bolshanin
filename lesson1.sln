#define _CRT_NO_SECURE_WARNINGS
#include <stdio.h>
#include <locale.h>
#include <ctype.h>
#include <iostream>
#include <windows.h>
#include <fstream>
#include <chrono>
#include <string>
#include <conio.h>
using namespace std;

// Функция для вычисления номера аркана
int arcan(int day, int month, int year) {
    // Суммируем цифры даты рождения
    int sum = 0;
    sum += (day / 10) + (day % 10); // Суммируем десятки и единицы дня
    sum += (month / 10) + (month % 10); // Суммируем десятки и единицы месяца
    sum += (year / 1000) + ((year / 100) % 10) + ((year / 10) % 10) + (year % 10); // Суммируем все цифры года

    // Если сумма больше 22, вычитаем 22 (добавляем ещё одно такое же условие, на
    // случай, если сумма будет всё равно больше 22)
    while (sum > 22) {
        sum -= 22;
    }

    return sum;
}

// Функция для установки цвета текста и фона
void SetColor(int textColor, int backgroundColor) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, (WORD)((backgroundColor << 4) | textColor));
}

// Функция для чтения и вывода описания аркана
void printArcanaDescription(int arcana) {
    std::ifstream infoFile("info.txt");
    if (!infoFile.is_open()) {
        std::cerr << "Не удалось открыть файл info.txt\n";
        return;
    }
    std::string line;
    int currentLine = 1;
    while (std::getline(infoFile, line)) {
        if (currentLine == arcana) {
            std::cout << "Описание аркана: " << line << std::endl;
            break;
        }
        currentLine++;
    }
    infoFile.close();
}

int pos = 0;
bool realdate = false;
int day, month, year; // Добавлены переменные для хранения даты

void Menu() {
    char menu[3][41] = { "1.Ввести Дату Рождения", "2.Вывести Аркан", "3.Вывести лог" };
    char marker[5] = "<-";
    for (int i = 0; i < 3; ++i) {
        printf("%s", menu[i]);
        if (i == pos) {
            printf(" %s", marker);
        }
        printf("\n");
    }
}

void handleAction(int choice) {
    system("cls");
    char input[20];
    switch (choice) {
    case 0: {
        // Ввод даты
        printf("Введите дату рождения (пример: день.месяц.год): ");
        scanf_s("%s", input, sizeof(input));

        // Проверка ввода даты
        if (sscanf_s(input, "%d.%d.%d", &day, &month, &year) != 3) {
            printf("Некорректный формат даты.\n");
            _getch();
            break;
        }
        if (month < 1 || month > 12) {
            printf("Некорректный ввод. Месяц не должен быть больше 12.\n");
            _getch();
            break;
        }
        if (day < 1 || day > 31) {
            printf("Некорректный ввод. Дней не должно быть больше 31.\n");
            _getch();
            break;
        }

        // Запись даты в файл log.txt
        std::ofstream logFile("log.txt", std::ios::app);
        logFile << day << "." << month << "." << year << std::endl;
        logFile.close();

        realdate = true; // Устанавливаем флаг, что дата введена
        _getch();
        break;
    }
    case 1: {
        if (realdate) {
            // Вывод аркана
            int arcana = arcan(day, month, year);
            printf("Ваш аркан: %d\n", arcana);

            // Вывод описания аркана
            printArcanaDescription(arcana);
            
            _getch();
        }
        else {
            printf("Введите дату рождения сначала!\n");
            _getch();
        }
        break;
    }
    case 2: {
        // Вывод содержимого log.txt
        std::ifstream logFile("log.txt");
        if (!logFile.is_open()) {
            std::cerr << "Не удалось открыть файл log.txt\n";
            break;
        }
        std::string line;
        while (std::getline(logFile, line)) {
            std::cout << line << std::endl;
        }
        logFile.close();
        _getch();
        break;
    }
    }
}

int main() {
    system("color 41"); // Устанавливаем цвет консоли
    HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(h, 23); // Изменяем цвет текста
    setlocale(LC_ALL, "Russian");
    int input;
    auto start = std::chrono::high_resolution_clock::now(); // Замер времени

    while (true) {
        system("cls"); // Очищаем консоль перед каждым выводом меню
        Menu();
        input = _getch();
        if (input == 49) { // '1'
            pos = 0;
        }
        else if (input == 50) { // '2'
            pos = 1;
        }
        else if (input == 51) { // '3'
            pos = 2;
        }
        else if (input == 13) { // Enter
            if (pos == 2) {
                // Вывод содержимого log.txt
                std::ifstream logFile("log.txt");
                if (!logFile.is_open()) {
                    std::cerr << "Не удалось открыть файл log.txt\n";
                    break;
                }
                std::string line;
                while (std::getline(logFile, line)) {
                    std::cout << line << std::endl;
                }
                logFile.close();
            }
            else {
                handleAction(pos);
            }
            if (pos == 1);
            // Сброс позиции после Enter (не уверен, что это нужно, но оставил для совместимости)
            pos = 0;
        }
        else if (input == 224) {
            input = _getch();
            if (input == 72) { // Вверх
                pos--;
                if (pos < 0) pos = 2;
            }
            else if (input == 80) { // Вниз
                pos++;
                if (pos > 2) pos = 0;
            }
        }
    }
    return 0;
}
